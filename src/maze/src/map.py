import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from enum import Enum

ranges = [float("inf"), 1.097000002861023, 1.0980000495910645, 1.100000023841858, float("inf"), float("inf"), 1.1069999933242798, 1.1089999675750732, float("inf"), float("inf"), 1.1150000095367432, 1.1160000562667847, 1.11899995803833, float("inf"), 1.125, 1.1360000371932983, 1.1299999952316284, float("inf"), float("inf"), 1.1369999647140503, 1.1399999856948853, float("inf"), float("inf"), 1.1460000276565552, 1.1480000019073486, 1.1510000228881836, float("inf"), 1.1579999923706055, 1.1579999923706055, 1.1619999408721924, float("inf"), float("inf"), 1.1699999570846558, 1.1720000505447388, float("inf"), float("inf"), 1.1799999475479126, 1.1820000410079956, 1.184999942779541, float("inf"), 1.1920000314712524, 1.1929999589920044, 1.1970000267028809, float("inf"), float("inf"), 1.2070000171661377, 1.2100000381469727, float("inf"), float("inf"), 1.218999981880188, 1.2200000286102295, 1.225000023841858, float("inf"), 1.2359999418258667, 1.2369999885559082, 1.246999979019165, float("inf"), float("inf"), 1.2730000019073486, 1.281999945640564, float("inf"), float("inf"), 1.2680000066757202, 1.2649999856948853, float("inf"), float("inf"), 1.25600004196167, 1.2580000162124634, 1.2699999809265137, float("inf"), float("inf"), 1.2940000295639038, 1.2979999780654907, float("inf"), float("inf"), 1.312000036239624, 1.315999984741211, 1.3209999799728394, float("inf"), 1.309999942779541, 1.3380000591278076, 1.3380000591278076, float("inf"), float("inf"), 1.3070000410079956, 1.284999966621399, float("inf"), float("inf"), 1.2890000343322754, 1.284999966621399, float("inf"), float("inf"), 1.2680000066757202, 1.2660000324249268, 1.2699999809265137, float("inf"), 1.2549999952316284, 1.2519999742507935, 1.25600004196167, float("inf"), 1.2589999437332153, 1.2669999599456787, 1.2649999856948853, 1.2680000066757202, 1.2660000324249268, 1.2719999551773071, 1.2730000019073486, 1.2790000438690186, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 4.269999980926514, 4.275000095367432, 4.249000072479248, float("inf"), float("inf"), 4.276000022888184, 4.229000091552734, 4.133999824523926, float("inf"), 4.2769999504089355, 4.3420000076293945, 4.3420000076293945, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 2.260999917984009, 2.384000062942505, 2.4660000801086426, float("inf"), float("inf"), 2.4619998931884766, 2.4630000591278076, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 1.2059999704360962, 1.1979999542236328, 1.194000005722046, float("inf"), 1.184000015258789, 1.1799999475479126, 1.1799999475479126, float("inf"), 1.1759999990463257, 1.1729999780654907, 1.1749999523162842, 1.1749999523162842, 1.1729999780654907, 1.1729999780654907, 1.1740000247955322, float("inf"), 1.180999994277954, float("inf"), float("inf"), float("inf"), float("inf"), 2.2109999656677246, float("inf"), float("inf"), float("inf"), 2.188999891281128, 2.180999994277954, float("inf"), 2.2009999752044678, 2.234999895095825, 2.246000051498413, 2.259000062942505, 2.2820000648498535, 2.312000036239624, 2.321000099182129, 2.3329999446868896, float("inf"), 2.361999988555908, 2.4019999504089355, 2.4159998893737793, float("inf"), 2.443000078201294, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 1.1629999876022339, 1.1629999876022339, 1.1619999408721924, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 3.1019999980926514, 3.0969998836517334, float("inf"), 3.1080000400543213, 3.128999948501587, 3.140000104904175, 3.1410000324249268, 3.1510000228881836, 3.1740000247955322, 3.1740000247955322, 3.183000087738037, 0.7699999809265137, float("inf"), float("inf"), 0.7570000290870667, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 1.2419999837875366, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 0.7070000171661377, 0.7020000219345093, 0.699999988079071, 0.6990000009536743, 0.6970000267028809, 0.6949999928474426, 0.6940000057220459, 0.6940000057220459, 0.6930000185966492, 0.6919999718666077, 0.6909999847412109, 0.6909999847412109, 0.6899999976158142, 0.6880000233650208, 0.6880000233650208, 0.6880000233650208, 0.6869999766349792, 0.6859999895095825, 0.6869999766349792, 0.6869999766349792, 0.6869999766349792, 0.6859999895095825, float("inf"), 0.6859999895095825, 0.6869999766349792, 0.6859999895095825, 0.6859999895095825, 0.6869999766349792, 0.6869999766349792, 0.6869999766349792, 0.6859999895095825, 0.6869999766349792, 0.6859999895095825, 0.6869999766349792, 0.6869999766349792, 0.6869999766349792, 0.6869999766349792, 0.6880000233650208, 0.6880000233650208, float("inf"), 0.6869999766349792, 0.6880000233650208, 0.6880000233650208, float("inf"), 0.6880000233650208, 0.6880000233650208, 0.6890000104904175, 0.6890000104904175, 0.6880000233650208, 0.6890000104904175, 0.6890000104904175, 0.6890000104904175, 0.6890000104904175, 0.6890000104904175, 0.6890000104904175, 0.6899999976158142, float("inf"), 0.6890000104904175, 0.6890000104904175, 0.6899999976158142, float("inf"), 0.6899999976158142, 0.6899999976158142, 0.6909999847412109, float("inf"), 0.6919999718666077, 0.6919999718666077, 0.6909999847412109, 0.6959999799728394, 0.6980000138282776, 0.6990000009536743, 0.7059999704360962, 0.6930000185966492, float("inf"), 0.6899999976158142, 0.6859999895095825, 0.6919999718666077, float("inf"), 0.6890000104904175, 0.6890000104904175, 0.6909999847412109, float("inf"), 0.6909999847412109, 0.6909999847412109, 0.6919999718666077, float("inf"), 0.6919999718666077, 0.6930000185966492, 0.6949999928474426, float("inf"), 0.6940000057220459, 0.6949999928474426, 0.6949999928474426, 0.6970000267028809, 0.6970000267028809, 0.6970000267028809, 0.6980000138282776, 0.6980000138282776, 0.6990000009536743, 0.6980000138282776, 0.699999988079071, 0.699999988079071, float("inf"), 0.7009999752044678, 0.7020000219345093, float("inf"), 0.703000009059906, 0.703000009059906, 0.7039999961853027, float("inf"), 0.7049999833106995, 0.7049999833106995, 0.7059999704360962, 0.7059999704360962, 0.7080000042915344, 0.7080000042915344, 0.7080000042915344, 0.7089999914169312, 0.7099999785423279, float("inf"), 0.7099999785423279, 0.7120000123977661, float("inf"), 0.7129999995231628, 0.7139999866485596, float("inf"), 0.7160000205039978, 0.7160000205039978, 0.7170000076293945, 0.7170000076293945, 0.7179999947547913, 0.718999981880188, 0.7200000286102295, 0.7210000157356262, 0.7229999899864197, float("inf"), 0.7239999771118164, 0.7239999771118164, float("inf"), 0.7260000109672546, 0.7269999980926514, 0.7279999852180481, 0.7279999852180481, 0.7289999723434448, 0.7300000190734863, 0.7310000061988831, 0.7319999933242798, 0.7329999804496765, float("inf"), 0.734000027179718, 0.7350000143051147, 0.7369999885559082, float("inf"), 0.7379999756813049, 0.7390000224113464, float("inf"), 0.7409999966621399, 0.7419999837875366, 0.7429999709129333, 0.7440000176429749, 0.7459999918937683, 0.7459999918937683, 0.746999979019165, 0.7480000257492065, 0.75, float("inf"), 0.7509999871253967, 0.7519999742507935, float("inf"), 0.7549999952316284, 0.7559999823570251, 0.7570000290870667, 0.7580000162124634, 0.7599999904632568, 0.7609999775886536, 0.7620000243186951, 0.7630000114440918, 0.765999972820282, float("inf"), 0.7670000195503235, 0.7680000066757202, float("inf"), 0.7710000276565552, 0.7720000147819519, 0.7730000019073486, 0.7739999890327454, 0.7760000228881836, 0.777999997138977, 0.7789999842643738, 0.7799999713897705, 0.7820000052452087, float("inf"), 0.7839999794960022, 0.7850000262260437, float("inf"), 0.7879999876022339, 0.7900000214576721, 0.7910000085830688, 0.7929999828338623, 0.7950000166893005, 0.7960000038146973, 0.7979999780654907, 0.7990000247955322, 0.8009999990463257, float("inf"), 0.8029999732971191, 0.8109999895095825, float("inf"), 0.8040000200271606, 0.8100000023841858, 0.8140000104904175, 0.8169999718666077, 0.8140000104904175, 0.8159999847412109, 0.8180000185966492, 0.8190000057220459, 0.8209999799728394, 0.8230000138282776, 0.8230000138282776, 0.824999988079071, float("inf"), 0.8270000219345093, 0.8299999833106995, 0.8309999704360962, 0.8320000171661377, 0.8349999785423279, 0.8370000123977661, 0.8389999866485596, 0.8399999737739563, 0.8429999947547913, 0.8460000157356262, 0.847000002861023, 0.8479999899864197, float("inf"), 0.8510000109672546, 0.8539999723434448, 0.8539999723434448, 0.8569999933242798, 0.859000027179718, 0.8619999885559082, 0.8640000224113464, 0.8659999966621399, 0.8690000176429749, 0.8709999918937683, 0.8730000257492065, 0.875, float("inf"), 0.8790000081062317, 0.8809999823570251, float("inf"), 0.8849999904632568, 0.8889999985694885, 0.8920000195503235, 0.8920000195503235, 0.8960000276565552, 0.8989999890327454, 0.9020000100135803, 0.902999997138977, 0.906000018119812, float("inf"), 0.9100000262260437, 0.9120000004768372, float("inf"), 0.9169999957084656, 0.9210000038146973, 0.9240000247955322, 0.925000011920929, 0.9279999732971191, float("inf"), 0.9359999895095825, 0.9369999766349792, 0.9399999976158142, float("inf"), float("inf"), 0.9490000009536743, 0.9520000219345093, float("inf"), float("inf"), 0.9610000252723694, 0.9620000123977661, 0.9649999737739563, float("inf"), float("inf"), 0.9750000238418579, 0.9789999723434448, float("inf"), float("inf"), 0.9900000095367432, 0.9929999709129333, float("inf"), float("inf"), 1.003000020980835, 1.0049999952316284, 1.0080000162124634, float("inf"), float("inf"), 1.034000039100647, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), 1.8309999704360962, float("inf"), 1.8140000104904175, 1.8140000104904175, 1.809000015258789, float("inf"), 1.7960000038146973, 1.7940000295639038, 1.7899999618530273, float("inf"), float("inf"), 1.774999976158142, 1.7710000276565552, float("inf"), float("inf"), 1.75600004196167, 1.753000020980835, float("inf"), float("inf"), 1.7410000562667847, float("inf"), 1.7350000143051147, float("inf"), 1.7230000495910645, 1.7230000495910645, 1.718999981880188, float("inf"), 1.7059999704360962, 1.7050000429153442, 1.7029999494552612, float("inf"), float("inf"), 1.690999984741211, 1.687999963760376, float("inf"), float("inf"), 1.6749999523162842, 1.6720000505447388, float("inf"), float("inf"), 1.6640000343322754, 1.6629999876022339, 1.6610000133514404, float("inf"), 1.6449999809265137, 1.6430000066757202, 1.6440000534057617, float("inf"), 1.6349999904632568, 1.6319999694824219, 1.6299999952316284, float("inf"), float("inf"), 1.6200000047683716, 1.6169999837875366, float("inf"), float("inf"), 1.6080000400543213, float("inf"), 1.6050000190734863, float("inf"), 1.597000002861023, 1.5959999561309814, 1.593000054359436, float("inf"), 1.5850000381469727, 1.5839999914169312, 1.5820000171661377, float("inf"), 1.5729999542236328, 1.5720000267028809, 1.569000005722046, float("inf"), float("inf"), 1.562999963760376, 1.5609999895095825, float("inf"), float("inf"), 1.5520000457763672, float("inf"), 1.5509999990463257, float("inf"), 1.5399999618530273, 1.5390000343322754, 1.5379999876022339, float("inf"), 1.531000018119812, 1.531000018119812, 1.5290000438690186, float("inf"), 1.5219999551773071, 1.5219999551773071, 1.5199999809265137, float("inf"), float("inf"), 1.5130000114440918, float("inf"), 1.5110000371932983, float("inf"), 1.50600004196167, float("inf"), 1.503000020980835, float("inf"), 1.4919999837875366, 1.4919999837875366, 1.496000051498413, float("inf"), 1.4900000095367432, 1.4900000095367432, 1.4880000352859497, float("inf"), 1.4819999933242798, 1.4809999465942383, float("inf"), 1.4800000190734863, float("inf"), 1.4739999771118164, float("inf"), 1.4730000495910645, float("inf"), 1.4670000076293945, float("inf"), 1.465000033378601, float("inf"), 1.4620000123977661, 1.4600000381469727, 1.4559999704360962, float("inf"), 1.4539999961853027, 1.4529999494552612, 1.4529999494552612, float("inf"), float("inf"), 1.4470000267028809, 1.4470000267028809, float("inf"), 1.4429999589920044, 1.4429999589920044, 1.440999984741211, float("inf"), 1.4390000104904175, 1.437999963760376, 1.4359999895095825, float("inf"), 1.4320000410079956, float("inf"), 1.4359999895095825, float("inf"), 1.4229999780654907, float("inf"), 1.4249999523162842, 1.4249999523162842, float("inf"), 1.4199999570846558, 1.4210000038146973, 1.4199999570846558, float("inf"), 1.4170000553131104, 1.4160000085830688, 1.4149999618530273, float("inf"), 1.4110000133514404, 1.409000039100647, 1.4110000133514404, float("inf"), 1.4079999923706055, float("inf"), 1.406999945640564, float("inf"), float("inf"), 1.4079999923706055, 1.406000018119812, 1.406000018119812, float("inf"), 1.4019999504089355, 1.399999976158142, 1.3990000486373901, float("inf"), 1.3980000019073486, float("inf"), 1.3960000276565552, float("inf"), 1.3940000534057617, float("inf"), 1.3940000534057617, float("inf"), float("inf"), 1.3919999599456787, 1.3910000324249268, 1.3910000324249268, float("inf"), 1.3880000114440918, 1.3869999647140503, 1.3880000114440918, float("inf"), 1.3860000371932983, 1.3869999647140503, 1.3860000371932983, float("inf"), 1.3830000162124634, float("inf"), 1.3839999437332153, float("inf"), 1.3819999694824219, float("inf"), 1.38100004196167, float("inf"), float("inf"), 1.378999948501587, 1.378999948501587, 1.378000020980835, float("inf"), 1.3769999742507935, 1.378999948501587, 1.3769999742507935, float("inf"), 1.3760000467300415, float("inf"), 1.3760000467300415, float("inf"), 1.3830000162124634, float("inf"), 1.375, float("inf"), float("inf"), 1.3730000257492065, 1.3899999856948853, 1.371999979019165, float("inf"), 1.371999979019165, 1.3730000257492065, 1.371999979019165, float("inf"), 1.371999979019165, float("inf"), 1.371999979019165, float("inf"), 1.3769999742507935, float("inf"), 1.3739999532699585, float("inf"), float("inf"), 1.3830000162124634, 1.3730000257492065, 1.3830000162124634, float("inf"), 1.3730000257492065, 1.371999979019165, 1.3739999532699585, float("inf"), 1.371999979019165, float("inf"), 1.371000051498413, float("inf"), 1.371999979019165, float("inf"), 1.3730000257492065, float("inf"), float("inf"), 1.371999979019165, 1.3730000257492065, 1.3730000257492065, float("inf"), 1.3739999532699585, 1.3730000257492065, 1.3730000257492065, float("inf"), 1.3739999532699585, float("inf"), 1.3760000467300415, float("inf"), 1.378999948501587, float("inf"), 1.378999948501587, float("inf"), float("inf"), 1.3769999742507935, 1.378999948501587, 1.378000020980835, float("inf"), 1.378999948501587, 1.3799999952316284, 1.3799999952316284, float("inf"), 1.38100004196167, 1.3819999694824219, 1.3819999694824219, float("inf"), 1.3839999437332153, float("inf"), 1.3839999437332153, float("inf"), float("inf"), 1.3860000371932983, 1.3869999647140503, 1.3910000324249268, float("inf"), 1.3960000276565552, 1.3990000486373901, 1.3980000019073486, float("inf"), 1.3890000581741333, float("inf"), 1.3930000066757202, 1.3940000534057617, float("inf"), 1.3960000276565552, 1.3960000276565552, 1.3980000019073486, float("inf"), 1.3990000486373901, 1.399999976158142, float("inf"), 1.4010000228881836, 1.402999997138977, 1.402999997138977, 1.4040000438690186, 1.4049999713897705, 1.406999945640564, 1.4079999923706055, 1.4079999923706055, 1.4119999408721924, float("inf"), 1.409999966621399, 1.4149999618530273, 1.4119999408721924, float("inf"), 1.4140000343322754, 1.4179999828338623, float("inf"), 1.4179999828338623, 1.4210000038146973, 1.4210000038146973, 1.4210000038146973, 1.4229999780654907, 1.4249999523162842, 1.4270000457763672, 1.4259999990463257, 1.4279999732971191, float("inf"), 1.4279999732971191, 1.430999994277954, 1.434000015258789, float("inf"), 1.4359999895095825, 1.440999984741211, float("inf"), 1.4420000314712524, 1.437999963760376, 1.4420000314712524, 1.4420000314712524, 1.4450000524520874, 1.4470000267028809, 1.4490000009536743, 1.4500000476837158, 1.4509999752044678, float("inf"), 1.4529999494552612, 1.4559999704360962, 1.4579999446868896, float("inf"), 1.4600000381469727, 1.4620000123977661, 1.4630000591278076, 1.465000033378601, 1.468999981880188, 1.468999981880188, 1.468999981880188, 1.4800000190734863, 1.4780000448226929, 1.4759999513626099, 1.472000002861023, 1.4780000448226929, float("inf"), 1.4809999465942383, 1.4830000400543213, float("inf"), 1.4859999418258667, 1.4900000095367432, 1.4919999837875366, 1.4919999837875366, 1.4930000305175781, 1.4980000257492065, 1.4989999532699585, 1.5010000467300415, 1.503000020980835, float("inf"), 1.5049999952316284, 1.5080000162124634, 1.5110000371932983, float("inf"), 1.5169999599456787, 1.5190000534057617, float("inf"), 1.5210000276565552, 1.5240000486373901, 1.524999976158142, 1.524999976158142, 1.5299999713897705, 1.5329999923706055, 1.534000039100647, 1.5360000133514404, 1.5399999618530273, float("inf"), 1.5420000553131104, 1.5449999570846558, 1.5479999780654907, float("inf"), 1.5549999475479126, 1.5549999475479126, 1.555999994277954, 1.5679999589920044, 1.5679999589920044, 1.565999984741211, 1.562000036239624, 1.5700000524520874, 1.5729999542236328, 1.5770000219345093, 1.5770000219345093, 1.5800000429153442, float("inf"), 1.5839999914169312, 1.5880000591278076, float("inf"), 1.5920000076293945, 1.5950000286102295, 1.5989999771118164, 1.6009999513626099, 1.6030000448226929, 1.6119999885559082, 1.6169999837875366, 1.6169999837875366, 1.6169999837875366, 1.621999979019165, float("inf"), 1.625, float("inf"), float("inf"), float("inf"), float("inf"), 0.9129999876022339, 0.9079999923706055, float("inf"), 0.9039999842643738, 0.8999999761581421, 0.8949999809265137, float("inf"), 0.8920000195503235, 0.8889999985694885, 0.8870000243186951, 0.8840000033378601, 0.8799999952316284, 0.8769999742507935, 0.8759999871253967, 0.871999979019165, 0.8690000176429749, 0.8659999966621399, 0.8650000095367432, 0.8619999885559082, 0.8579999804496765, 0.8550000190734863, 0.8550000190734863, 0.8500000238418579, 0.847000002861023, 0.8450000286102295, 0.843999981880188, 0.8399999737739563, float("inf"), 0.8370000123977661, 0.8339999914169312, 0.8299999833106995, float("inf"), float("inf"), 0.824999988079071, 0.8230000138282776, 0.8199999928474426, float("inf"), 0.8149999976158142, 0.8130000233650208, 0.8100000023841858, float("inf"), 0.8050000071525574, 0.8029999732971191, 0.8009999990463257, float("inf"), 0.7960000038146973, 0.7940000295639038, 0.7919999957084656, float("inf"), 0.7860000133514404, 0.7850000262260437, 0.7820000052452087, float("inf"), 0.777999997138977, 0.7760000228881836, 0.7749999761581421, float("inf"), float("inf"), 0.7689999938011169, 0.765999972820282, float("inf"), float("inf"), 0.7609999775886536, 0.7580000162124634, float("inf"), float("inf"), 0.753000020980835, 0.75, float("inf"), float("inf"), 0.7450000047683716, 0.7450000047683716, 0.7419999837875366, float("inf"), 0.7379999756813049, 0.7369999885559082, 0.7350000143051147, float("inf"), 0.7300000190734863, 0.7289999723434448, 0.7269999980926514, float("inf"), 0.7229999899864197, 0.722000002861023, 0.718999981880188, float("inf"), 0.7160000205039978, 0.7149999737739563, 0.7129999995231628, float("inf"), float("inf"), 0.7070000171661377, 0.7049999833106995, float("inf"), float("inf"), 0.7009999752044678, 0.6990000009536743, float("inf"), float("inf"), 0.6949999928474426, 0.6970000267028809, 0.6930000185966492, float("inf"), 0.6930000185966492, 0.6940000057220459, 0.6919999718666077, float("inf"), 0.6779999732971191, 0.6769999861717224, 0.675000011920929, float("inf"), 0.671999990940094, 0.6710000038146973, 0.6700000166893005, float("inf"), 0.6669999957084656, 0.6660000085830688, 0.6639999747276306, float("inf"), 0.6620000004768372, 0.6600000262260437, 0.6589999794960022, float("inf"), float("inf"), 0.6570000052452087, 0.6539999842643738, float("inf"), float("inf"), 0.6520000100135803, 0.6489999890327454, float("inf"), float("inf"), 0.6470000147819519, 0.6460000276565552, 0.6449999809265137, float("inf"), 0.6420000195503235, 0.640999972820282, 0.640999972820282, float("inf"), 0.6380000114440918, 0.6370000243186951, 0.6359999775886536, float("inf"), 0.6340000033378601, 0.6330000162124634, 0.6320000290870667, float("inf"), 0.6290000081062317, 0.6290000081062317, 0.628000020980835, float("inf"), float("inf"), 0.625, 0.6240000128746033, float("inf"), float("inf"), 0.621999979019165, 0.6200000047683716, float("inf"), float("inf"), 0.6179999709129333, 0.6169999837875366, 0.6159999966621399, float("inf"), 0.6140000224113464, 0.6129999756813049, 0.6129999756813049, float("inf"), 0.6100000143051147, 0.6100000143051147, 0.609000027179718, float("inf"), 0.6069999933242798, 0.6069999933242798, 0.6060000061988831, float("inf"), float("inf"), 0.6039999723434448, 0.6019999980926514, float("inf"), float("inf"), 0.6000000238418579, 0.5989999771118164, float("inf"), float("inf"), 0.597000002861023, 0.597000002861023, 0.5960000157356262, float("inf"), 0.593999981880188, 0.593999981880188, 0.5929999947547913, float("inf"), 0.5910000205039978, 0.5910000205039978, float("inf"), float("inf"), 0.5889999866485596, 0.5879999995231628, float("inf"), float("inf"), 0.5860000252723694, 0.5860000252723694, 0.5860000252723694, float("inf"), 0.5839999914169312, 0.5830000042915344, 0.5830000042915344, float("inf"), 0.5809999704360962, 0.5799999833106995, 0.5799999833106995, float("inf"), 0.5789999961853027, float("inf"), 0.578000009059906, float("inf"), float("inf"), 0.5770000219345093, 0.5759999752044678, float("inf"), float("inf"), 0.5740000009536743, 0.5730000138282776, 0.5730000138282776, float("inf"), 0.5709999799728394, 0.5709999799728394, 0.5709999799728394, float("inf"), 0.5699999928474426, float("inf"), 0.5690000057220459, float("inf"), float("inf"), 0.5680000185966492, 0.5669999718666077, float("inf"), float("inf"), 0.5659999847412109, 0.5649999976158142, float("inf"), float("inf"), 0.5640000104904175, 0.5630000233650208, 0.5630000233650208, float("inf"), 0.5619999766349792, 0.5619999766349792, 0.5609999895095825, float("inf"), 0.5609999895095825, float("inf"), 0.5600000023841858, float("inf"), float("inf"), 0.5590000152587891, 0.5580000281333923, float("inf"), float("inf"), 0.5569999814033508, 0.5569999814033508, 0.5569999814033508, float("inf"), 0.5559999942779541, 0.5559999942779541, 0.5550000071525574, float("inf"), 0.5550000071525574, float("inf"), 0.5540000200271606, float("inf"), 0.5519999861717224, float("inf"), 0.5519999861717224, float("inf"), float("inf"), 0.5509999990463257, 0.5509999990463257, 0.5509999990463257, float("inf"), 0.550000011920929, 0.550000011920929, 0.550000011920929, float("inf"), 0.5490000247955322, float("inf"), 0.5479999780654907, float("inf"), 0.5479999780654907, float("inf"), 0.546999990940094, float("inf"), float("inf"), 0.546999990940094, 0.546999990940094, float("inf"), float("inf"), 0.5460000038146973, 0.5460000038146973, 0.5460000038146973, float("inf"), 0.5450000166893005, 0.5450000166893005, 0.5450000166893005, float("inf"), 0.5450000166893005, float("inf"), 0.5440000295639038, float("inf"), float("inf"), 0.5440000295639038, 0.5440000295639038, float("inf"), float("inf"), 0.5440000295639038, 0.5429999828338623, 0.5429999828338623, float("inf"), 0.5429999828338623, 0.5429999828338623, 0.5429999828338623, float("inf"), 0.5429999828338623, float("inf"), 0.5419999957084656, float("inf"), float("inf"), 0.5419999957084656, 0.5419999957084656, float("inf"), float("inf"), 0.5419999957084656, 0.5419999957084656, 0.5419999957084656, float("inf"), 0.5419999957084656, float("inf"), 0.5419999957084656, float("inf"), 0.5419999957084656, float("inf"), 0.5419999957084656, float("inf"), float("inf"), 0.5419999957084656, 0.5419999957084656, float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf")]


class State(Enum):
    # First stage of the puzzle, while has wall at both sides
    CORRIDOR = 0
    # End of the corridor, end of corridor walls, will walk a little further before changing to the next state
    END_CORRIDOR = 1
    # Take a picture of both sides, and then turn to the choosen one
    CAMERA_DECISION = 2
    # Go ahead while it's possible
    WALK_TO_DEST = 3

STATE = State.CORRIDOR

def generate_map_matrix(ranges, angle_min, angle_max, grid_size=101, resolution=0.1):
    """
    Generates a matrix representation of a map from LiDAR ranges and angles.
    
    Parameters:
    ranges (list): List of LiDAR range measurements.
    angle_min (float): Minimum angle of the LiDAR scan.
    angle_max (float): Maximum angle of the LiDAR scan.
    grid_size (int): Size of the grid map (grid_size x grid_size).
    resolution (float): Meters per grid cell.
    
    Returns:
    np.array: Occupancy grid map.
    list: List of (x, y) tuples representing Cartesian coordinates.
    np.array: Valid angles corresponding to the ranges.
    """
    angles = np.linspace(angle_min, angle_max, len(ranges))
    points = []
    grid = np.zeros((grid_size, grid_size))  # Initialize occupancy grid
    
    for i, (r, angle) in enumerate(zip(ranges, angles)):
        if np.isinf(r) or np.isnan(r):  # Ignore invalid range values
            continue
        
        x = r * np.cos(angle)  # Convert polar to Cartesian (x-coordinate)
        y = r * np.sin(angle)  # Convert polar to Cartesian (y-coordinate)
        points.append((x, y))  # Store the point in the list
        
        # Convert to grid indices with clipping to stay within bounds
        grid_x = int(round(x / resolution)) + grid_size // 2
        grid_y = int(round(y / resolution)) + grid_size // 2
        
        # Ensure indices are within grid boundaries
        if 0 <= grid_x < grid_size and 0 <= grid_y < grid_size:
            grid[grid_y, grid_x] = 1  # Mark occupied cell
    
    return grid, points, angles

def plt_map(grid, points, angles, ranges, grid_size=100, resolution=0.1):
    # Prepare data for plotting
    x_vals, y_vals = zip(*points) if points else ([], [])
    max_coord = (grid_size * resolution) / 2
    extent = [-max_coord, max_coord, -max_coord, max_coord]

    # Create figure with three subplots
    plt.figure(figsize=(15, 5))

    # 1. Polar plot of raw LiDAR data
    plt.subplot(1, 3, 1, projection='polar')
    valid_ranges = np.where(np.isinf(ranges), np.nan, ranges)  # Handle infinite ranges
    plt.scatter(angles, valid_ranges, s=2, c='b', alpha=0.5)
    plt.title("LiDAR Scan (Polar)", pad=20)
    plt.grid(True)

    # 2. Cartesian plot of valid points
    plt.subplot(1, 3, 2)
    plt.scatter(x_vals, y_vals, s=2, c='r')
    plt.title("Cartesian Projection", pad=20)
    plt.xlabel("X (meters)")
    plt.ylabel("Y (meters)")
    plt.axis('equal')
    plt.grid(True)

    # 3. Occupancy grid map
    plt.subplot(1, 3, 3)
    grid[len(grid)//2][len(grid)//2] = 2
    plt.imshow(grid, cmap='gray_r', origin='lower', extent=extent)
    plt.title("Occupancy Grid Map", pad=20)
    plt.xlabel("X (meters)")
    plt.ylabel("Y (meters)")
    # # Set the physical extent of the map
    # extent = [-1.5, 1.5, -1.5, 1.5]

    # # Calculate step size in world units
    # x_step = (extent[1] - extent[0]) / grid.shape[1]
    # y_step = (extent[3] - extent[2]) / grid.shape[0]

    # # Tick positions at cell boundaries
    # x_ticks = np.arange(extent[0], extent[1] + x_step, x_step)
    # y_ticks = np.arange(extent[2], extent[3] + y_step, y_step)
    # plt.xticks(x_ticks)
    # plt.yticks(y_ticks)
    plt.grid(True)

    nome_arquivo = f'map.png'
    plt.savefig(nome_arquivo)
    plt.close()

def get_lidar_msg(ranges, angle_min, angle_max, grid_size):
    wall_not_found_counter = 0
    wall_tolerance = 1

    grid, points, angles = generate_map_matrix(ranges, angle_min, angle_max, grid_size=grid_size)
    # plt_map(grid, points, angles, msg.ranges, grid_size=grid_size)

    if STATE == State.CORRIDOR:
        dist_left, dist_right, i = (np.inf, np.inf, 1)
        for i in range(1, grid_size//2):
            if grid[grid_size//2][grid_size//2+i] == 1:
                dist_left = i
                is_wall = False
                for j in [-1, 0, 1]:
                    if grid[(grid_size//2)-1][(grid_size//2)+i+j] == 1:
                        is_wall = True 
                        break
                if not is_wall:
                    wall_not_found_counter += 1
                break
        for i in range(-1, -grid_size//2, -1):
            if grid[grid_size//2][grid_size//2+i] == 1:
                dist_right = -i
                is_wall = False
                for j in [-1, 0, 1]:
                    if grid[(grid_size//2)-1][(grid_size//2)-i+j] == 1:
                        is_wall = True 
                        break
                if not is_wall:
                    wall_not_found_counter += 1
                break
        
        # Send calculated speed to motors, using distance to calculate the desired speed for each wheel

        target_x = (dist_right - dist_left) // 2
        target_y = 1
        
        if wall_not_found_counter >= wall_tolerance:
            state = State.END_CORRIDOR

        print(dist_left, dist_right)
        print(target_x, target_y)

        return target_x, target_y
    
        # TODO: Check if grid[GRID_SIZE//2][GRID_SIZE//2+dist] can reach the ones below it, if not we lost the wall

    # elif STATE == State.CORRIDOR:
    # elif STATE == State.CORRIDOR:
    # elif STATE == State.CORRIDOR:


if __name__ == '__main__':
    grid_size = 100
    resolution = 0.1  # Meters per cell
    angle_min = -3.665191411972046
    angle_max = 2.6179940700531006
    grid, points, angles = generate_map_matrix(ranges, angle_min, angle_max, grid_size, resolution)

    get_lidar_msg(ranges, angle_min, angle_max, grid_size)
    plt_map(grid, points, angles, ranges, grid_size=grid_size)

    